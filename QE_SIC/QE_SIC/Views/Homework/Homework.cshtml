

@using QE.Models
@using QE.Models.ViewModels
@model HomeworkViewModel

@{
    ViewBag.Title = "Homework";
}

<link rel="stylesheet" href="~/Scripts/lib/themes/default.css">
<link rel="stylesheet" href="~/Scripts/lib/themes/default.date.css">

@*<head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    </head>*@
<style>
    .GeneralPage {
        min-width: 1024px;
        min-height: 576px;
        background-color: #f2f2f2;
        opacity: 0.985;
        text-align: center;
        vertical-align: middle;
        text-align: center;
        vertical-align: middle;
        padding: 10px;
    }

    .remove-btn {
        width: 50%;
        vertical-align: middle;
        display: none;
    }

    .add-btn {
        width: 20%;
        vertical-align: middle;
    }

    .input-Box, .UserList {
        border: 1px solid transparent;
        padding: 2px;
        vertical-align: middle;
        width: 100%;
        text-align: center;
        text-align-last: center;
        text-overflow: clip;
    }

    select {
        border: none;
        margin: 1px;
    }

    .blackBtn {
        background-color: #777777;
        font-weight: bold;
        color: white;
        border: none;
        height: 30px;
        width: 200px;
        border-radius: 2px;
        margin: 2px;
    }

    .blind {
        display: none;
    }


    .blind2 {
        display: none;
    }

    .glyphicon {
        background: none;
        border: none;
        color: #777777;
    }

    .glyphicon-remove {
        display: none;
    }

    #editForm {
        float: right;
    }

    .fade {
        opacity: 0;
        display: none;
        -webkit-transition: opacity 0.15s linear;
        -moz-transition: opacity 0.15s linear;
        -o-transition: opacity 0.15s linear;
        transition: opacity 0.15s linear;
        z-index: 1;
    }

        .fade.in {
            opacity: 1;
            display: block;
        }
</style>


<div id="msgSuccess" class="alert alert-success alert-dismissable fade">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    <strong>Success!</strong> @TempData[Constant.msg_success]
</div>

<div id="msgFail" class="alert alert-danger alert-dismissable fade">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    <strong>Failed!</strong> @TempData[Constant.msg_error]
</div>
<div class="GeneralPage">
    <div class="container">

        <div class="row">
            <div class="pull-left h4">
                @using (Html.BeginForm("Homework", "Homework", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.DropDownListFor(Model => Model.SelectedTerm, Model.termFilList)
                    @Html.DropDownListFor(Model => Model.SelectedGroup, Model.groupFilList)
                    @Html.DropDownListFor(Model => Model.SelectedType, Model.typeFilList)
                    <button type="submit" class="glyphicon glyphicon-search" formaction="@Url.Action("viewHomework", "Homework")" />
                }
            </div>
            <div class="pull-right h2" style="margin-left:5px; margin-right:5px;">
                <label class="fa fa-file-excel-o" id="btnExport" onclick="fnExcelReport('works', 0)"></label>
            </div>
            <div class="pull-right">
                <input type="button" class="blackBtn" value="Edit" id="editForm">
            </div>
        </div>
        <p class="pull-left">*Beware! Save your changes before you go to next step</p>
        <br /><br />

        @using (Html.BeginForm("Homework", "Homework", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <table class="table sortable" id="works">
                <tr>
                    <th class="col-md-2 text-center text-nowrap">@Constant.HomeworkViewLabel.Type.Name</th>
                    <th class="col-md-2 text-center text-nowrap">@Constant.HomeworkViewLabel.Type.TypeSelect</th>
                    <th class="col-md-2 text-center text-nowrap">@Constant.HomeworkViewLabel.Type.GroupSelect</th>
                    <th class="col-md-1 text-center text-nowrap">@Constant.HomeworkViewLabel.Type.DateAssign</th>
                    <th class="col-md-1 text-center text-nowrap">@Constant.HomeworkViewLabel.Type.Duration</th>
                    <th class="col-md-1 text-center text-nowrap">@Constant.HomeworkViewLabel.Type.SubRatio</th>
                    <th class="col-md-1 text-center text-nowrap">@Constant.HomeworkViewLabel.Type.LateRatio</th>
                    <th class="col-md-1 text-center text-nowrap">@Constant.HomeworkViewLabel.Type.FullMark</th>
                    <th class="col-md-1 text-center text-nowrap"></th>
                </tr>

                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)


                @if (Model.inactiveList != null)
                {
                    for (int i = 0; i < Model.inactiveList.Count; i++)
                    {
                        @Html.HiddenFor(Model => Model.inactiveList[i])
                    }
                }


                @if (Model.viewList != null)
                {
                    for (int i = 0; i < Model.viewList.Count; i++)
                    {
                        <tr>
                            @Html.HiddenFor(Model => Model.viewList[i].ID)
                            @Html.HiddenFor(Model => Model.viewList[i].group_id)
                            @Html.HiddenFor(Model => Model.viewList[i].type_id)
                            @Html.HiddenFor(Model => Model.viewList[i].name)
                            @Html.HiddenFor(Model => Model.viewList[i].group_name)
                            @Html.HiddenFor(Model => Model.viewList[i].type_name)
                            @Html.HiddenFor(Model => Model.viewList[i].date_assign)
                            @Html.HiddenFor(Model => Model.viewList[i].date_due)
                            @Html.HiddenFor(Model => Model.viewList[i].submission_ratio)
                            @Html.HiddenFor(Model => Model.viewList[i].late_ratio)
                            @Html.HiddenFor(Model => Model.viewList[i].full_mark)

                            <td class="col-md-2 text-nowrap">
                                @Html.DisplayFor(model => Model.viewList[i].name, new { htmlAttributes = new { @class = "input-Box" } })
                            </td>
                            <td class="col-md-2 text-nowrap">
                                @Html.DisplayFor(Model => Model.viewList[i].type_name, new { htmlAttributes = new { @class = "input-Box" } })
                            </td>
                            <td class="col-md-2 text-nowrap">
                                @Html.DisplayFor(Model => Model.viewList[i].group_name, new { htmlAttributes = new { @class = "input-Box" } })
                            </td>
                            <td class="col-md-1 text-nowrap">
                                @Html.DisplayFor(Model => Model.viewList[i].date_assign, new { htmlAttributes = new { @class = "input-Box" } })
                            </td>
                            <td class="col-md-1 text-nowrap">
                                @Html.DisplayFor(Model => Model.viewList[i].date_due, new { htmlAttributes = new { @class = "input-Box" } })
                            </td>
                            <td class="col-md-1 text-nowrap">
                                @Html.DisplayFor(Model => Model.viewList[i].submission_ratio, new { htmlAttributes = new { @class = "input-Box" } })
                            </td>
                            <td class="col-md-1 text-nowrap">
                                @Html.DisplayFor(Model => Model.viewList[i].late_ratio, new { htmlAttributes = new { @class = "input-Box" } })
                            </td>
                            <td class="col-md-1 text-nowrap">
                                @Html.DisplayFor(Model => Model.viewList[i].full_mark, new { htmlAttributes = new { @class = "input-Box" } })
                            </td>
                            <td class="col-md-1">
                                <button type="submit" class="glyphicon glyphicon-list" formaction="@Url.Action("viewSubmission", "Homework", new { HWV_id = Model.viewList[i].ID })" />
                                <button type="submit" class="glyphicon glyphicon-remove blind" formaction="@Url.Action("InactiveWork", "Homework", new { HVM_id = Model.viewList[i].ID })" />
                            </td>
                        </tr>
                    }
                }

            </table>
            <table class="table blind">
                @Html.HiddenFor(Model => Model.newWork.ID)
                <tr>
                    <td class="col-md-2 text-nowrap">@Html.EditorFor(model => model.newWork.NAME, new { htmlAttributes = new { @class = "input-Box" } })</td>
                    <td class="col-md-2 text-nowrap">@Html.DropDownListFor(Model => Model.newWork.HOMEWORK_TYPE, Model.typeSelectList)</td>
                    <td class="col-md-2 text-nowrap">@Html.DropDownListFor(Model => Model.newWork.STUDENT_GROUP, Model.groupSelectList)</td>
                    <td class="col-md-1 text-nowrap"></td>
                    <td class="col-md-1 text-nowrap">@Html.TextBoxFor(Model => Model.newWork.DUE_DATE, "{0:yyyy-MM-dd}", new { @class = "input-Box datepicker" })</td>
                    <td class="col-md-1 text-nowrap">@Html.HiddenFor(Model => Model.newWork.SUBMISSION_RATIO)</td>
                    <td class="col-md-1 text-nowrap">@Html.HiddenFor(Model => Model.newWork.LATE_RATIO)</td>
                    <td class="col-md-1 text-nowrap">@Html.EditorFor(Model => Model.newWork.FULL_MARK, new { htmlAttributes = new { @class = "input-Box" } })</td>
                    <td class="col-md-1 text-nowrap"><button type="submit" class="glyphicon glyphicon-plus" formaction='@Url.Action("AddWork", "Homework")' /></td>
                </tr>
                <tr>
                    <td class="col-md-2">@Html.ValidationMessageFor(Model => Model.newWork.NAME, "", new { @class = "text-danger" })</td>
                    <td class="col-md-2"></td>
                    <td class="col-md-2"></td>
                    <td class="col-md-1"></td>
                    <td class="col-md-1">@Html.ValidationMessageFor(Model => Model.newWork.DUE_DATE, "", new { @class = "text-danger" })</td>
                    <td class="col-md-1"></td>
                    <td class="col-md-1"></td>
                    <td class="col-md-1">@Html.ValidationMessageFor(Model => Model.newWork.FULL_MARK, "", new { @class = "text-danger" })</td>
                    <td class="col-md-1"></td>
                </tr>
            </table>
            <input type="submit" class="blackBtn blind" value="Save">
            <br /><br />
            if (Model.submission_list != null && Model.submission_list.Count > 0)
            {
                <div class="container blind2">
                    <div class="col-md-12 well">
                        <label class="fa fa-file-excel-o pull-right" id="btnExport" onclick="fnExcelReport('sub', 1)"></label>
                        <table class="table sortable" id="sub">
                            <tr>
                                <th class="col-md-1 text-center text-nowrap">Class</th>
                                <th class="col-md-1 text-center text-nowrap">Cls No</th>
                                <th class="col-md-2 text-center text-nowrap">Student Name</th>
                                <th class="col-md-2 text-center text-nowrap">Work Name</th>
                                <th class="col-md-2 text-center text-nowrap">Submission Date</th>
                                <th class="col-md-1 text-center text-nowrap">Mark</th>
                                <th class="col-md-1 text-center text-nowrap">Submitted</th>
                                <th class="col-md-2 text-center text-nowrap">Remark</th>
                            </tr>

                            @for (int s = 0; s < Model.submission_list.Count; s++)
                            {
                                <tr>
                                    @Html.HiddenFor(Model => Model.submission_list[s].homework_id)
                                    @Html.HiddenFor(Model => Model.submission_list[s].group_id)
                                    @Html.HiddenFor(Model => Model.submission_list[s].QE_class)
                                    @Html.HiddenFor(Model => Model.submission_list[s].QE_class_name)
                                    @Html.HiddenFor(Model => Model.submission_list[s].work_name)
                                    @Html.HiddenFor(Model => Model.submission_list[s].group_name)
                                    @Html.HiddenFor(Model => Model.submission_list[s].class_num)
                                    @Html.HiddenFor(Model => Model.submission_list[s].student_id)
                                    @Html.HiddenFor(Model => Model.submission_list[s].submission_id)
                                    @Html.HiddenFor(Model => Model.submission_list[s].student_name)
                                    @Html.HiddenFor(Model => Model.submission_list[s].submit_date)

                                    <td class="col-md-1 text-nowrap">
                                        @Html.DisplayFor(Model => Model.submission_list[s].QE_class_name)
                                    </td>
                                    <td class="col-md-1 text-nowrap">
                                        @Html.DisplayFor(Model => Model.submission_list[s].class_num)
                                    </td>
                                    <td class="col-md-2 text-nowrap">
                                        @Html.DisplayFor(Model => Model.submission_list[s].student_name)
                                    </td>
                                    <td class="col-md-2 text-nowrap">
                                        @Html.DisplayFor(Model => Model.submission_list[s].work_name)
                                    </td>
                                    <td class="col-md-2 text-nowrap">
                                        @if (Model.submission_list[s].submit_date > Constant.DEF_DATETIME)
                                        {
                                            @Html.DisplayFor(Model => Model.submission_list[s].submit_date)}
                                    </td>
                                    <td class="col-md-1 text-nowrap">
                                        @Html.EditorFor(Model => Model.submission_list[s].mark, new { htmlAttributes = new { @class = "input-Box marks mark" + Model.submission_list[s].submission_id + " ", @onchange = "checkMark(" + Model.submission_list[s].submission_id + ")" } })
                                    </td>
                                    <td class="col-md-1 text-nowrap">
                                        @Html.CheckBoxFor(Model => Model.submission_list[s].contain, new { htmlAttributes = new { @class = "chk" } })
                                    </td>
                                    <td class="col-md-2 text-nowrap">
                                        @Html.EditorFor(Model => Model.submission_list[s].remark, new { htmlAttributes = new { @class = "input-Box" } })
                                    </td>
                                </tr>
                            }
                            <tr>
                                <td class="col-md-1 text-center text-nowrap"></td>
                                <td class="col-md-1 text-center text-nowrap"></td>
                                <td class="col-md-2 text-center text-nowrap"></td>
                                <td class="col-md-2 text-center text-nowrap"></td>
                                <td class="col-md-2 text-center text-nowrap"></td>
                                <td class="col-md-1 text-center text-nowrap"><label id="match-all">ALL</label><label style="display:none" id="full-mark">@Model.viewList.Where(v => v.ID == Model.submission_list.First().homework_id).First().full_mark</label></td>
                                <td class="col-md-1 text-center text-nowrap"><label id="select-all">ALL</label></td>
                                <td class="col-md-2 text-center text-nowrap"></td>
                            </tr>
                        </table>
                        <input type="submit" value="SAVE" id="SAVE" class="blackBtn" formaction='@Url.Action("SaveSubmissions", "Homework")' />
                    </div>
                </div>
            }
        }
    </div>
</div>



<div id="container"></div>
<iframe id="txtArea1" style="display:none"></iframe>


<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/sorttable/sorttable.js"></script>
<script src="~/Scripts/lib/picker.js"></script>
<script src="~/Scripts/lib/picker.date.js"></script>
<script src="~/Scripts/lib/legacy.js"></script>
<script src="~/Scripts/Common.tool.js"></script>
<script>

    
        $('#editForm').show(); //check authentication

        $('#editForm').click(function () {
            $('.blind').toggle();
            $('.blind2').hide();

        });

        $('.glyphicon-list').click(function () {
            $('.blind').hide();
            //$('.blind2').show();
            $('.glyphicon-remove').hide;

        });

        var showForm = '@TempData["showform"]';
        var showForm2 = '@TempData["showform2"]';


        if (showForm == 'True') {
            $('.blind').show();
        }

        if (showForm2 == 'True') {
            $('.blind2').show();
    }

    var success = '@TempData[Constant.msg_success]';
    var fail = '@TempData[Constant.msg_error]';

    if (success) {
            $("#msgSuccess").addClass("in");
    }

    if (fail) {
        $("#msgFail").addClass("in");
    }


    var $input = $('.datepicker').pickadate({
        formatSubmit: 'yyyy/mm/dd',
        // min: [2015, 7, 14],
        container: '#container',
        //editable: true,
        closeOnSelect: true,
        closeOnClear: false,
    })

    var picker = $input.pickadate('picker')

    var submisstionAllSelected = false;

    $('#select-all').click(function (event) {

        if (!submisstionAllSelected) {
            $(':checkbox').each(function () {
                this.checked = true;
                $('#select-all').text('NONE');
            });

            submisstionAllSelected = true;
        } else {
            $(':checkbox').each(function () {
                this.checked = false;
                $('#select-all').text('ALL');
            });

            submisstionAllSelected = false;
        }
    });

    $('#match-all').click(function (event) {
        var full = $('#full-mark').text();
        $('.marks').val(parseInt(full));
    });

    function checkMark(id) {

        var full = parseInt($('#full-mark').text());
        var mark = $(".mark" + id).val();
        if (mark > full) {
            alert('Strange! Mark of a homework shall not exceed its full mark')
            $('#SAVE').prop('disabled', true);
            $(".mark" + id).css("background", "red");
            $(".mark" + id).css("color", "white");
        } else {
            $('#SAVE').prop('disabled', false);
            $(".mark" + id).css("background", "white");
            $(".mark" + id).css("color", "initial");
        }
    }

    $(document).ready(function () {

    });
</script>

